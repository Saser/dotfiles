#!/usr/bin/env python3

import json
import argparse
import sys
import subprocess
import signal

config = {}


def parser():
    p = argparse.ArgumentParser()
    p.add_argument(
        "-c", "--config-file", help="Path to configuration file", required=True
    )
    return p


def handler(config_file_path):
    def signal_handler(signum, frame):
        parse_config(config_file_path)

    return signal_handler


def parse_config(config_file_path):
    global config
    with open(config_file_path) as config_file:
        config = json.load(config_file)


def is_focus(line):
    return line.split(" ")[0] == "node_focus"


def get_class_name(line):
    assert is_focus(line)
    pieces = line.split(" ")
    node_id = pieces[3]
    cmd = []
    cmd += ["bspc"]
    cmd += ["query"]
    cmd += ["--tree"]
    cmd += ["--node", node_id]
    process = subprocess.run(cmd, stdout=subprocess.PIPE)
    output = process.stdout.strip()
    tree = json.loads(output)
    return tree["client"]["className"]


if __name__ == "__main__":
    p = parser()
    args = p.parse_args()
    parse_config(args.config_file)
    signal.signal(signal.SIGUSR1, handler(args.config_file))
    for line in sys.stdin:
        line = line.strip()
        if not is_focus(line):
            continue
        class_name = get_class_name(line)
        if class_name == "" or class_name not in config:
            class_name = "default"
        layout = config[class_name]
        cmd = []
        cmd += ["setxkbmap"]
        cmd += ["-layout", layout]
        subprocess.run(cmd)
